<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>天空之城</title>
    <link>/</link>
    <description>Recent content on 天空之城</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Dec 2019 23:46:44 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Php</title>
      <link>/cheatsheet/php/</link>
      <pubDate>Fri, 27 Dec 2019 23:46:44 +0800</pubDate>
      
      <guid>/cheatsheet/php/</guid>
      <description>Composer 使用 安装 curl -sS https://getcomposer.org/installer | php curl -sS https://getcomposer.org/installer | php -- --install-dir=/data/home（存放的路径） mv composer.phar /usr/local/bin/composer 记得做这个操作的时候需在 COMPOSER.PHAR 文件 优化速度 composer dumpautoload -o 设置请求头 // 返回 json 头部设置 header(&#39;HTTP/1.1 200 Ok&#39;); header(&#39;Content-Type: application/json ; charset=utf-8&#39;); // 图片输出 header(&amp;quot;Content-type: image/png&amp;quot;); 跨域设置请求头 // 允许 ajax 跨域请求 // 允许 www.test.com 发起的跨域请求 header(&amp;quot;Access-Control-Allow-Origin: www.test.com&amp;quot;); //如果需要设置允许所有域名发起的跨</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>/cheatsheet/mysql/</link>
      <pubDate>Fri, 27 Dec 2019 23:34:15 +0800</pubDate>
      
      <guid>/cheatsheet/mysql/</guid>
      <description>创建表 DROP TABLE IF EXISTS `post`; CREATE TABLE `post` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `title` char(25) NOT NULL DEFAULT &#39;&#39;, `summary` char(12) NOT NULL DEFAULT &#39;&#39;, `content` text unsigned NOT NULL DEFAULT 0, `keyword` varchar(16) NOT NULL DEFAULT &#39;&#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin; 修改表结构 alter table post add column subtitle VARCHAR(32) COLLATE utf8_bin NOT NULL DEFAULT &#39;&#39;; alter table post add column deleted_at datetime; alter table post add index deleted_at(deleted_at); alter table `post` add column `status` tinyint(4) NOT NULL DEFAULT 0; 导出导入 # 语法： mysqldump -u &amp;lt;username&amp;gt; -p db &amp;gt; /path/to/***.sql # 将某个库中的某个表导出 mysqldump -h 127.0.0.1 -P 3306 -uroot -ppwd db_name table_name &amp;gt; ***.sql # 将数据从文件导入到某个库 mysql</description>
    </item>
    
    <item>
      <title>Mysql Json </title>
      <link>/cheatsheet/mysql-json/</link>
      <pubDate>Fri, 27 Dec 2019 23:17:26 +0800</pubDate>
      
      <guid>/cheatsheet/mysql-json/</guid>
      <description> JSON_REPLACE  -- one way JSON_REPLACE(data,&#39;$.&amp;quot;time&amp;quot;&#39;,data-&amp;gt;&#39;$.&amp;quot;time&amp;quot;&#39; * 1000) -- another way JSON_REPLACE(data,&#39;$.time&#39;,data-&amp;gt;&#39;$.time&#39; * 1000)   JSON_EXTRACT  JSON_EXTRACT(data,&#39;$.title&#39;)   JSON_INSERT  JSON_INSERT(data, &#39;$.title&#39;, CONVERT(&#39;{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;}&#39;,JSON));   JSON_SET  json_set(fields,&amp;quot;$.title&amp;quot;,CONVERT(&#39;{&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;}&#39;,JSON)); -- update update post set fields = json_set(fields,&amp;quot;$.title&amp;quot;,CONVERT(&#39;{&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;}&#39;,JSON));  </description>
    </item>
    
    <item>
      <title>Elasticsearch 故障分析解决</title>
      <link>/post/analysis-elasticsearch-trouble-shooting/</link>
      <pubDate>Tue, 24 Dec 2019 23:38:36 +0800</pubDate>
      
      <guid>/post/analysis-elasticsearch-trouble-shooting/</guid>
      <description>集群状态显示黄色 集群中存在未分配的 shards。在某个节点重新启动后也不能自动分配。 查看集群副本恢复状态： GET user/_recovery?active_only=true 查看未分配原因： GET _cluster/allocation/explain?pretty 结果中有：allocation_status: &amp;quot;no_attempt&amp;quot; 重新执行分配： POST /_cluster/reroute?retry_failed=true 查看相应索引的分片： GET /_cat/shards?index=index_name 相关参数： # 最大重试，默认为 5 index.allocation.max_retries # 负载均衡参数，默认为 true cluster.routing.rebalance.enable 参考 cat API</description>
    </item>
    
    <item>
      <title>Elasticsearch 查询与过滤是按什么顺序执行的？</title>
      <link>/post/translation_elasticsearch-query-execution-order/</link>
      <pubDate>Mon, 09 Dec 2019 10:10:51 +0800</pubDate>
      
      <guid>/post/translation_elasticsearch-query-execution-order/</guid>
      <description>我们经常收到关于过滤器执行顺序的问题，过滤器是在查询之前执行还是之后执行等等的问题。些确实是重要的问题，快速执行查询的秘诀通常就是先运行代价低的再运行代价高。你或许过去听到或者读到过滤在查询之前执行的说法。虽然这句话很好地说明了我们没有计算不匹配的过滤文档分数，但真实情况要更复杂一点。同样</description>
    </item>
    
    <item>
      <title>Elasticsearch Mapping Format</title>
      <link>/post/elasticsearch-mapping-format/</link>
      <pubDate>Sun, 08 Dec 2019 22:04:33 +0800</pubDate>
      
      <guid>/post/elasticsearch-mapping-format/</guid>
      <description>参考 https://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping-date-format.html</description>
    </item>
    
    <item>
      <title>Elasticsearch 通用配置</title>
      <link>/post/elasticsearch-common-options/</link>
      <pubDate>Sun, 08 Dec 2019 21:58:36 +0800</pubDate>
      
      <guid>/post/elasticsearch-common-options/</guid>
      <description>常用选项 以下选项可应用于所有 REST API。 漂亮的结果 当附加 ?pretty=true 到任何请求时，返回的 JSON 格式将会格式化（仅用于调试！）另一个选项是设置为 ?format=yaml，这将导致结果以(有时)更具可读性的 yaml 格式返回。 人类可读的输出 统计数据以适合人类阅读的格式返回，（例如&amp;quot;exists_time&amp;q</description>
    </item>
    
    <item>
      <title>Elasticsearch 之范围查询</title>
      <link>/post/elasticsearch-range-query/</link>
      <pubDate>Wed, 04 Dec 2019 09:28:55 +0800</pubDate>
      
      <guid>/post/elasticsearch-range-query/</guid>
      <description>范围查询 匹配字段在某一特定范围的文档。Lucene 查询取决于字段类型，对于字符串字段使用 TermRangeQuery，数字/日期类型使用 NumericRangeQuery。下面示例将返回 age 在 10 到 20 之间所有的文档。 curl -X GET &amp;quot;localhost:9200/_search?pretty&amp;quot; -H &#39;Content-Type: application/json&#39; -d&#39; { &amp;quot;query&amp;quot;: { &amp;quot;range&amp;quot; : { &amp;quot;age&amp;quot; : { &amp;quot;gte&amp;quot; : 10, &amp;quot;lte&amp;quot; : 20, &amp;quot;boost&amp;quot; : 2.0 } } } } &#39; GET _search { &amp;quot;query&amp;quot;: { &amp;quot;range&amp;quot; : {</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>